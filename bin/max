#!/usr/bin/env node
var Max = require('../max');
var Parser = require('rss-parser');
var parser = new Parser();
var eachOfLimit = require('async/eachOfLimit');
var CLApp = require('app-term-kit');

var max = new CLApp('max.term', {
    config : {
        "bitdepth": 4,
        "personalities": [],
        "engines": ['eliza'],
        "plugins": []
    },
    copyright : 'Abbey Hawk Sparrow',
    copystart : '2021',
    defaults :
//neat in the file is better than neat in the source
`{
  // This file was autogenerated by max.term
  //
  //default color depth (4, 8, 32)
  "bitdepth": 4,
  "personalities": [],
  "engines": ['eliza'],
  "plugins": []
}`
});

var personality;

var maxbot = new Max({
    personality : personality || 'headroom',
    modulesDir : max.defaultPluginDir()
});

max.header();
max.help();

max.command({
    name : 'say',
    description: 'say something',
    examples: [],
    action : function(argv, target){
        maxbot.say(target, (err, response)=>{
            console.log('RES', response);
        });
    }
});
max.command({
    name : 'news',
    description: 'speak a feed',
    examples: [],
    action : function(argv, target){
        parser.parseURL(target).then(function(feed){
            eachOfLimit(feed.items, 1, function(item, index, done){
                maxbot.say(item.content, (err, response)=>{
                    max.start('idle');
                    setTimeout(function(){
                        done();
                    }, 1000 * Math.floor(Math.random()*8)); //wait 0-8s
                });
            }, function(){
                console.log('FINISHED');
            })
        }).catch(function(err){

        });
    }
});
max.command({
    name : 'ask',
    description: 'get a response to a single query',
    examples: [],
    action : function(argv, target){
        maxbot.input(target, (err, response)=>{
            console.log('RES', response);
        });
    }
});

max.argument({
    name : 'headroom',
    type : 'boolean',
    description: 'use the headroom personality'
});

max.argument({
    name : 'hal',
    type : 'boolean',
    description: 'use the HAL personality'
});

max.argument({
    name : 'annak',
    type : 'boolean',
    description: 'use the Anna K personality'
});

max.plugins({
    plugins: {
        detect : (s)=>{ s.indexOf('max.term.plugin-') !== -1 }
    },
    personalities: {
        detect : (s)=>{ s.indexOf('max.term-') !== -1 }
    },
    engines: {
        detect : (s)=>{ s.indexOf('max.term.engine-') !== -1 }
    },
}, function(err, config, loadPlugins){
    max.footer();
    max.run();
});

//var modulePath = path.join(os.homedir(), '.max.term', 'node_modules');

/* ensureDir(modulePath, function(err){
    if(err) throw err;
    yargs.usage('Usage: $0 <command> [options] <target>')
    yargs.command('say', 'say something')
        .command('bot', 'run interactively')
        .command('install', 'install a personality')
        .command('news', 'speak a feed')
        .command('ask', 'get a response to a single query')
        .command('tune-in', 'watch the broadcast')
        .demand(2)
        .example('$0 --headroom say "Hello"', 'say hello in the headroom personality')
        .example('$0 install hal', 'install the HAL personality')
        .example('$0 --hal news http://rss.slashdot.org/Slashdot/slashdotMain', 'Have HAL read the slashdot RSS feed')
        .alias('p', 'personality')
            .nargs('p', 1)
            .describe('p', 'explicitly define the personality')
        .boolean('M')
            .alias('M', 'headroom')
            .describe('M', 'use the headroom personality')
        .boolean('H')
            .alias('H', 'hal')
            .describe('H', 'use the hal 9000 personality')
        .boolean('J')
            .alias('J', 'annak')
            .describe('J', 'use the annak personality')
        .help('h')
        .alias('h', 'help')
        .epilog('Â©2021 - Abbey Hawk Sparrow');
    argv = yargs.argv;
    var action = argv._.shift();
    var target = argv._.pop();

    var personality;

    if(argv.M) personality = 'headroom';
    if(argv.J) personality = 'annak';
    if(argv.H) personality = 'hal';

    var max = new Max({
        personality : personality
    });

    switch(action){
        case 'say':
            max.say(target, (err, response)=>{
                console.log('RES', response);
            });
            break;
        case 'speak':
        case 'ask':
            max.input(target, (err, response)=>{
                console.log('RES', response);
            });
            break;
        case 'news':
            parser.parseURL(target).then(function(feed){
                eachOfLimit(feed.items, 1, function(item, index, done){
                    max.say(item.content, (err, response)=>{
                        max.start('idle');
                        setTimeout(function(){
                            done();
                        }, 1000 * Math.floor(Math.random()*8)); //wait 0-8s
                    });
                }, function(){
                    console.log('FINISHED');
                })
            }).catch(function(err){

            });
            break;
        default: throw new Error('Unkown action: '+action);
    }
});*/
