#!/usr/bin/env node
var Max = require('../max');
var Parser = require('rss-parser');
var parser = new Parser();
var eachOfLimit = require('async/eachOfLimit');
var CLApp = require('app-term-kit');

var max = new CLApp('max.term', {
    config : {
        "bitdepth": 4,
        "personalities": [],
        "engines": ['eliza'],
        "plugins": []
    },
    copyright : 'Abbey Hawk Sparrow',
    copystart : '2021',
    defaults :
//neat in the file is better than neat in the source
`{
  // This file was autogenerated by max.term
  //
  //default color depth (4, 8, 32)
  "bitdepth": 4,
  "personalities": [],
  "engines": ['eliza'],
  "plugins": []
}`
});

var personality;
var maxbot;

max.header();
max.help();

max.command({
    name : 'say',
    description: 'say something',
    examples: [],
    action : function(argv, target, complete){
        maxbot.say(target, (err, response)=>{
            //console.log('RES', response);
            complete();
        });
    }
});
max.command({
    name : 'news',
    description: 'speak a feed',
    examples: [],
    action : function(argv, target, complete){
        parser.parseURL(target).then(function(feed){
            eachOfLimit(feed.items, 1, function(item, index, done){
                maxbot.say(item.content, (err, response)=>{
                    maxbot.start('idle');
                    setTimeout(function(){
                        done();
                    }, 1000 * Math.floor(Math.random()*8)); //wait 0-8s
                });
            }, function(){
                console.log('FINISHED');
                complete();
            })
        }).catch(function(err){

        });
    }
});
max.command({
    name : 'ask',
    description: 'get a response to a single query',
    examples: [],
    action : function(argv, target, complete){
        maxbot.input(target, (err, response)=>{
            console.log('RES', response);
            complete()
        });
    }
});

var getSelectedPlugin = function(type, pluginObjects, argv){
    var typeObjects = pluginObjects[type];
    var result;
    typeObjects.forEach(function(obj){
        if(result) return;
        if(obj.isEnabled(argv)) result = obj;
    });
    return result;
}

max.plugins({
    plugin: { prefix : 'max.term.plugin-' },
    personality: { prefix : 'max.term-' },
    engine: { prefix : 'max.term.engine-' }
}, function(err, config, loadPlugins){
    loadPlugins('*', function(err, plugins, pluginObjects){
        var pluginNames = Object.keys(plugins.personality);
        pluginNames.forEach(function(name){
            if(pluginObjects.personality[name].configureCLApp){
                pluginObjects.personality[name].configureCLApp(max);
            }
        });
        var selected = getSelectedPlugin(
            'personality',
            pluginObjects,
            max.argv()
        );
        if(selected){
            maxbot = new Max({
                personality : selected.name,
                plugin : function(type, name){
                    return max.plugin(type, name);
                },
                modulesDir : max.defaultPluginDir()
            });
        }
        max.footer();
        max.run(function(err){
            console.log('Goodbye.');
        });
    });
});
